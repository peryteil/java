1. 입력
이름 -- 오로지 한글만 입력받고 싶음.
나이 -- 0 세 120세 까지만 입력받고 싶음.
전화번호 -- 010-xxxx-xxxx 패턴으로 입력

유효성 검사 -validation check 

정규식(Reguler expression)
create user study_user@'%' identified by 'study';

grant all privileges on study_db.* to study_user@'%' with grant option;
1 : GRANT는 사용자에게 데이터베이스의 사용 권한을 적용합니다.
-ALL PRIVILEGES 는 데이터베이스에 대한 모든 권한입니다.(디비 삭제도 가능)
-ON study_db.* 권한 대상은 study_db 이며, study_db.* 이라하는 것은 study_db의 모든 테이블을 의미
-TO study_user@localhost 사용 권한을 받는 사용자는 study_user이며(없는 유저라면 새롭게 생성) localhost는 말 그대로 로컬에서만 연결 가능(127.0.0.1)
-IDENTIFIED BY 'study' 사용자의 비밀번호 설정
(localhost가 아닌 외부에서 접근하려고 한다면 접근 권한을 따로 설정해주면 가능)
2 : exit 현재 연결된 mysql을 닫습니다. (현재에는 root 권한으로 로그인 되어있었고 방금 사용자로 mysql에 접속하기 위함)

3 : mysql -u study_user -p (이렇게 입력하시면 방금 만든 study를 입력하여 사용자 로그인 합니다)

4 : use study_db 해당 사용자가 study_db라는 데이터베이스를 사용하는 것입니다. (하나의 사용자는 여러 데이터베이스를 사용 가능합니다.)

flush privileges;

mysql -u study_user -p

CREATE TABLE professor1
( _id INT PRIMARY KEY AUTO_INCREMENT, _
name VARCHAR(32) NOT NULL,
belong VARCHAR(12) DEFAULT 'FOO',
phone VARCHAR(12)
);

DESCRIBE professor1;

3 : _id란 이름의 칼럼을 추가하며, 데이터 타입은 INT, PRIMARY KEY 기본키 키로 설정, AUTO_INCREMENT 자동 인덱스 증가(순번은 직접 입력할 필요 없이 1,2,3,...과 같은 방식으로 1부터 자동으로 증가합니다.
사용할 때 주의사항!
(AUTO_INCREMENT를 지정하는 열에는 꼭 PRIMARY KEY (기본키)로 지정해줘야 합니다.)
-auto_increment는 테이블에 새로운 레코드가 들어올때 사용자가 입력하지 않아도 _id 값 중 가장 큰 값에 +1 한 값을 설정해 줌으로써 중복된 값이 없도록함
-default: 보면 모두 NULL로 되어 있는데, default 값을 따로 설정하지 않으면 모두 NULL)

4 : name 이란 칼럼을 추가, 데이터 타입은 VARCHAR(32), NOT NULL (자료를 입력할 때 항상 값을 넣어주어야 함)

5 : DEFAULT 는 아무런 값을 입력하지 않을 때 자동으로 입력되는 값

6: 테이블 구조 확인 (줄여서 DESC professor; 도 같은 기능)

CREATE TABLE professor
(
_id INT AUTO_INVREMENT,
name VARCHAR(32) NOT NULL,
belong VARCHAR(12) DEFAULT 'FOO',
phone VARCHAR(12),
PRIMARY KEY(_id)
);

※ 데이터 타입
문자형 데이터타입
CHAR(n) 고정길이 데이터 타입-지정된 길이보다 짧은 데이터 입력될 시 나머지 공간 공백으로 채워진다.
VARCHAR(n) 가변 길이 데이터 타입-지정된 길이보다 짧은 데이터 입력될시 나머지 공간은 채우지 않는다.
TINYTEXT(n) 문자열 데이터 타입
TEXT(n) 문자열 데이터 타입
MEDIUMTEXT(n) 문자열 데이터 타입
LONGTEXT(n) 문자열 데이터 타입

숫자형 데이터 타입
TINYINT(n) 정수형 데이터 타입 -128~ +127 또는 0~255수 표현 가능하다.
SMALLINT(n) 정수형 데이터 타입 -32768~32767 또는 0~65536수 표현 가능하다.
MEDIUMINT(n) 정수형 데이터 타입
INT(n) 정수형 데이터 타입
BIGINT(n) 정수형 데이터 타입-무제한 수 표현 가능하다.
FLOAT(길이,소수) 부동 소수형 데이터 타입-고정 수소점 사용 형태이다.
DECIMAL(길이,소수) 고정 소수형 데이터 타입고정-소수점을 사용 형태이다.
DOUBLE(길이,소수) DOUBLE을 문자열로 저장한다.

날짜형 데이터 타입
DATE

4. 데이터 삽입 (INSERT)

INSERT INTO professor1
(name, belong, phone)
VALUES('유재석','IDE','01012345678');
INSERT INTO professor1
(name, belong, phone)
VALUES('황영조','MSE','01021342443');
INSERT INTO professor1
(name, belong, phone)
VALUES('케이멀','ESE','01023424343');
INSERT INTO professor1
(_id,name, belong, phone)
VALUES(256,'호날두','IME','01034343222');
INSERT INTO professor1
(name, belong, phone)
VALUES('리오넬','IDE','01023422432');
SELECT _id, belong, phone FROM professor1;

SELECT * FROM professor1;

1 : INSERT INTO professor > professor에 레코드를 삽입,

2 : (name, belong, phone) professor가 가지는 컬럼을 명시(_id는 생략했지만 AUTO_INCREMENT가 대신 값을 넣어줌)

3 : VALUES('유재석,'IDE','01012345678') name, belong, phone 과 같은 순서로 name: '유재석, belong : 'IDE', phone : '01012345678'

4 : 뒤 부터 해석하시면 됩니다. professor 테이블로 부터 _id, belong, phone 을 선택한다.

5 : *은 테이블이 가진 모든 필드 입니다.

CREATE TABLE student
(
_id CHAR(9),
name VARCHAR(48) NOT NULL,
belong VARCHAR(5),
phone VARCHAR(11),
status INT DEFAULT 0
);

INSERT INTO student VALUES('20090101', '루피', 'IDE', '01012345678', 1);
INSERT INTO student VALUES('20100102', '조로', 'CSE', '01023435343', 4);
INSERT INTO student VALUES('20110103', '상디', 'MSE', '01021342443', 1);
INSERT INTO student VALUES('20100204', '버기', 'ESE', '01023424343', 2);
INSERT INTO student VALUES('20110106', '프랑키', 'IME', '01034343222' , 0);
INSERT INTO student VALUES('20080104', '나미', 'IDE', '01023432432', 6);
INSERT INTO student VALUES('20090105', '쵸파', 'CSE', '01012342433', 8);
INSERT INTO student VALUES('20090301', '에릭', 'ESE', '01032424244', 5);
INSERT INTO student VALUES('20090302', '전진', 'IDE', '01012321313', 3);
INSERT INTO student VALUES('20100505', '오공', 'CSE', '01023534644', 2);
INSERT INTO student VALUES('20110506', '오천', 'MSE', '01021334525', 8);
INSERT INTO student VALUES('20100507', '베지터', 'ESE', '01023423623', 0);
INSERT INTO student VALUES('20110502', '부우', 'IME', '01034332634', 1);
INSERT INTO student VALUES('20080501', '크리링', 'IDE', '01023436346', 2);
INSERT INTO student VALUES('20090503', '피콜로', 'CSE', '01013634645', 3);
INSERT INTO student VALUES('20090509', '셀', 'ESE', '01032427535', 0);

위 테이블 생성문은 크게 어렵지 않을 것입니다.
TIP: mysql은 데이터 타입에 상관없이 DEAFULT 가 NULL 입니다.

①명령 프롬프트 문자셋 확인
chcp
②문자셋 맞추기
chcp 65001

5. 데이터 선택 (SELECT)
데이터를 선택할 때는 선택할 데이터의 칼럼을 선택하거나 레코드의 순서도 지정 할 수 있습니다.
SELECT 할 때 *을 사용하면 모든 데이터를 가져올 수 있습니다. 그러나 원하는 데이터만 가져오는 것은 매우 중요합니다.

SELECT * FROM student;

SELECT * FROM student
ORDER BY _id;

2 : ORDER BY 라는 키워드가 처음 나왔습니다. 가져온 데이터를 특정 칼럼을 기준으로 정렬하는 것이죠.

6. 데이터 조건 선택 (WHERE)

원하는 데이터를 가져오는 것은 매우 중요합니다. 다음은 기본 조건을 살펴보겠습니다.
belong 이 'IDE'인 데이터를 뽑아보겠습니다.

SELECT * FROM student WHERE belong = 'IDE';

WHERE은 조건을 나타냅니다. 위 예시에서는 belong값이 ide와 일치하는 것을 찾았습니다.

SELECT * FROM student WHERE status > 0;

SELECT * FROM student WHERE status > 0 AND belong = 'IDE'
SELECT * FROM student WHERE status > 0 OR belong = 'IDE';

SELECT * FROM student WHERE _id > '2010';

문자열도 비교 연산이 가능합니다. 그러나 숫자와는 다릅니다. 사전의 순서라고 생각하시면 편합니다.

7. 와일드 카드 (LIKE, %, _ )
와일드카드라는 개념아시나요? 트럼프에서 조커 처럼 어떤 카드든 될 수 있는 카드입니다.

'%','_' 두 가지에 대해 알아보겠습니다.

먼저, '%'
SELECT * FROM student WHERE _id LIKE '2009%';

SELECT * FROM student WHERE NOT _id > '2010';

SELECT * FROM student WHERE _id <= '2010';

SELECT * FROM student WHERE NOT belong = 'IDE';

SELECT * FROM student WHERE belong <> 'IDE';

SELECT * FROM student WHERE NOT _id LIKE '2009%';

SELECT * FROM student WHERE _id NOT LIKE '2009%';
아래 LIKE 에 대한 NOT은 두 표현 모두 mysql에서는 같은 결과를 보여줬습니다.
그러나 아래의 표현이 더 일반적인 표현입니다.

SELECT * FROM student WHERE _id NOT LIKE '2009%';

2장 검색하기

1. 조건 검색, 효율적인 방법 (BETWEEN, IN)
2. 데이터베이스, 테이블, 데이터 삭제 (DROP, DELETE)
3. 테이블 변경 (UPDATE, CHANGE)
4. 데이터 변경
5. 생성문 보기 (SHOW)

1. 조건 검색, 효율적인 방법 (BETWEEN, IN)

SELECT * FROM student ORDER BY _id;


SELECT * FROM student
WHERE _id > '2010';

SELECT * FROM student
WHERE _id > '2009' AND _id < '2011';

SELECT * FROM student
WHERE _id BETWEEN '2009' AND '2011';
두 쿼리 모두 같은 결과를 내놓는다. 그러나 두 쿼리의 성능은 다르다. '2009'보다 큰 값을 모두 구하고, '2011' 보다 작은 값을 모두 구하여 교집합을 다시 구하는 연산과,

'2009' 부터 시작하여 '2011'보다 작을 때 까지 순차적으로 구하는 것과는 차이가 있을 것이기 때문이다.

SELECT * FROM student
WHERE belong = 'MSE' OR belong = 'ESE' OR belong = 'CSE';

SELECT * FROM student
WHERE belong IN ('MSE','ESE','CSE');
이 둘 또한 같은 결과를 내놓는다. 그러나 아래의 예가 더욱 좋다. 간단히 말 해 첫 번째 쿼리는 for 문을 총 3번 돈다면, 아래의 쿼리는 for문을 한 번 도는 것이기 때문이다.


2. 데이터베이스, 테이블 삭제

DROP DATABASE db_name;
DROP TABLE table_name;

DELETE FROM table_name;
DELETE FROM table_name WHERE _id = 20070103;

데이터베이스와 테이블을 제거할 때는 DROP을, 테이블의 데이터를 제거할 때는 DELETE를 사용한다. 데이터가 한 번 삭제되면 복구할 수 없으므로 삭제할 때는 조심히 해야 한다.

데이터를 삭제할 때는 원하는 데이터를 SELECT 할 때와 마찬가지로 조건을 주어 삭제할 수 있다.
(삭제할 때 SELECT를 통해 결과를 확인 후 DELETE하는 습관을 가지는 것이 좋다)

3. 테이블 변경 (ALTER)

테이블 변경에서는 아래의 일을 할 수 있다.
-테이블 이름 변경 (RENAME)
-테이블 칼럼, 제약조건 추가 (ADD)
-테이블 변경 (CHANGE, MODIFY)
-테이블 제약 조건 제거 (DROP)


DESC student;

ALTER TABLE student
RENAME TO hero;
DESC hero;

1: student라는 테이블을 변경
2: hero라는 새로운 이름으로 변경

B. 테이블 칼럼, 제약조건 추가 (ADD)

ALTER TABLE hero
ADD COLUMN star INT NOT NULL AFTER _id;

ALTER TABLE hero
ADD PRIMARY KEY (_id);

DESC hero;

star 라는 새로운 칼럼이 추가가 되었고, _id가 기본키로 변경되었다. 특이한 점은 AFTER _id 로 추가될 칼럼의 위치를 선정하는 점이다.

mysql에서는 first를 사용하면 첫 번째 칼럼으로 추가된다. (첫 번째 칼럼은 보통 기본키다.) 그런데 책에서는 SECOND, THIRD, LAST, BEFORE 등의 MODIFY와 CHANGE 모두 테이블의 칼럼의 상태를 변경하는 공통점이 있다. 그러나 CHANGE는 칼럼의 이름도 변경이 가능 하다.
ALTER TABLE hero
MODIFY COLUMN star BIGINT DEFAULT 10000;


ALTER TABLE hero
CHANGE COLUMN star rating INT DEFAULT 100;
DESC hero;

ALTER TABLE hero
DROP COLUMN star,
DROP PRIMARY KEY;

DESC hero;
테이블에서 star 칼럼을 제거하고, 기본키를 제거 한다.

4. 데이터 변경 (UPDATE)
UPDATE hero SET belong = 'ZER' WHERE status = 0;
SELECT * FROM hero;
첫 번째 쿼리는 status 값이 0인 레코드의 belong을 'ZER'로 바꾼다.
UPDATE hero SET belong = status + 200 WHERE _id LIKE '2009%';
SELECT * FROM hero;
두 번째 쿼리는 _id 가 '2009'로 시작하는 레코드의 status 값을 현재 값에서 200만큼 더한 값으로 변경한다.

5. 생성문 보기 (SHOW)

SHOW INDEX FROM hero;

각 테이블, 칼럼 이름 사이에 '로 감싸진 것을 볼 수 있다. 지금은 변수를 ' 로 감싸는구나 하고 생각하자. 저 구문을 복사하여 그대로 ' 가 있는 상태로 사용해도 상관없고, 제거해서 사용해도 좋다.

3장 내부 함수, 그룹 묶기
(SUM, COUNT, SUBSTRING, GROUP BY)
저번 시간을 통해 데이터를 선택하고, 변경하는 것에 대해 알아봤다. 이번 시간에 알아볼 것은 
mysql 에서 효율적으로 데이터를 처리하는 방법에 대해 공부하려한다.
데이터베이스에서 쓰지 않는 데이터를 모두 가져오는 일은 좋은 것이 아니다. 테이블 조차 필요한 칼럼에 중복을 최소화 하는 것이 좋다.

1. 내부 함수 사용하기 (SUM, COUNT, AVG)
내부 함수를 사용하면 데이터를 효율적으로 처리할 수 있습니다. 다음의 경우를 생각해봅시다.
->belong 이 'IDE'인 사람이 몇명인지 알고 싶다면??
->belong 인 'IDE'인 사람들의 status 값의 합은?

SELECT * FROM student
WHERE belong = 'IDE';
첫 번째 쿼리 : 저번 시간에 배웠던 belong 이 'IDE' 값들을 택하는 쿼리다.
SELECT COUNT(status) FROM student
WHERE belong = 'IDE';
두 번째 쿼리 : 결과 4, 선택된 아이템의 개수
SELECT SUM(status) FROM student
WHERE belong = 'IDE';
세 번째 쿼리 : 선택된 결과들의 status 총합

COUNT, SUM 외에도 AVG(평균), MIN(최소값), MAX(최대값) 도 사용할 수 있다.


2. 문자열을 다루는 내부함수 사용하기 (RIGHT, SUBSTRUNG_INDEX, UPPER)
흔히, 학벅을 물어보면, 11학번, 16학번 이런식으로 대답을 하게 된다. 우리는 _id값을 통해서 학번을 내부함수를 통해 구해볼 것이다.

SELECT _id, phone, RIGHT(phone, 4)
FROM student
WHERE belong = 'IDE';

SELECT _id, phone, RIGHT(phone, 4) AS phone_last
FROM student
WHERE belong = 'IDE';


SELECT _id, SUBSTRING(_id, 3, 6)
FROM student
WHERE belong = 'IDE';

SELECT _id, SUBSTRING_INDEX(_id, '1', 2)
FROM student
WHERE belong = 'IDE';

실제 사용 시 우리는 쿼리 결과의 칼럼명을 통해 필드값에 접근한다. 이럴 때 의미에 맞는 변수명을 지어줄 때 AS를 사용할 수 있다. AS는 쿼리를 더욱 간결하게 만들 때도 사용한다. 그것은 나중에 다루도록 하겠다.

SUBSTRING('20100103', 3, 3) : 3 번째 위치부터 3개의 문자열을 반환 -> '100'

SUBSTRING_INDEX('20100103', '1', 2) : '1'문자가 두 번째로 나오기 전까지 모든 문자열 -> '20100'

이것 외에도 문자열을 다루는 내부 함수는 UPPER, LOWER, REVERSE, LTRIM, LENGTH 등이 있다.

3. 데이터의 그룹별 선택 (GROUP BY)
이런 경우는 어떨까? 만약 특정 belong 별로 인원수가 몇명인지 알고 싶을 때.
SELECT belong, COUNT(*)
FROM student
GROUP BY belong;

쿼리 결과는 다음과 같다. belong을 기준으로 값은 값 끼리 묶어서 가져온다.
그러나 GROUP BY는 주의해야 할 점이 있다. 아래의 결과는 오류를 만든다.

SELECT name, belong, COUNT(*)
FROM student
GROUP BY belong;

SELECT belong, COUNT(*)
FROM student
GROUP BY belong;

SELECT belong, COUNT(*), MAX(status)
FROM student
GROUP BY belong
ORDER BY MAX(status) DESC, COUNT(*) ASC;

쿼리에 GROUP BY, ORDER BY 등이 모두 등장하여 조금 어려울 수 있지만, 차례대로 생각해보자.
우선 GROUP BY를 이용하여 belong값으로 묶었다.
우리가 얻은 결과값은 belong, 각 그룹에 속한 아이템의 개수, 그룹 내 status의 최대값을 볼 수 있다.
우리는 이 결과를 얻은 3가지 필드값으로 정렬할 수 있다.

여기서 order by에 두 개의 기준이 제시된다. 첫 째, MAX(status)값을 통해서 내림차순으로 정렬된다. 여기서 중복 값이 있는 것들 중에 내부 정렬을 두 번째 기준인 count(*) 오름차순으로 하게 되는 것이다.

결과적으로 최대값이 가장 큰 값을 기준으로 정렬되고, 가장 큰 값이 중복이 된다면, 사람 수가 적은 그룹이 우선순위가 되는 것이다.

4장 조인 : JOIN (INNER, LEFT, RIGHT)
조인은 관계형 데이터베이스에서 일반적으로 많이 사용하며, 충분한 이해 없이 사용하기 쉬운 내용이다.

이번 시간에는 여러 조인의 종류가 그 사용하는 예에 대해서 공부해보자.
1. INNER 조인

CREATE TABLE girl_group
(
_id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(32) NOT NULL,
debut DATE NOT NULL,
hit_song_id INT
);

CREATE TABLE song
(
_id INT PRIMARY KEY AUTO_INCREMENT,
title VARCHAR(32) NOT NULL,
lyrics VARCHAR(32)
);

INSERT INTO song (_id, title, lyrics) VALUES (101, 'Tell Me', 'tell me tell me
tetetete tel me');
INSERT INTO song (title, lyrics) VALUES ('Gee', 'GEE GEE GEE GEE GEE BABY
BABY');
INSERT INTO song (title, lyrics) VALUES ('미스터', '이름이 뭐야 미스터');
INSERT INTO song (title, lyrics) VALUES ('Abracadabra', '이러다 미쳐 내가 여리여리');
INSERT INTO song (title, lyrics) VALUES ('8282', 'Give me a call Baby baby');
INSERT INTO song (title, lyrics) VALUES ('기대해', '기대해');
INSERT INTO song (title, lyrics) VALUES ('I Don\'t car', '다른 여자들의 다리를');
INSERT INTO song (title, lyrics) VALUES ('Bad Girl Good Girl', '앞에선 한 마디 말도');
INSERT INTO song (title, lyrics) VALUES ('피노키오', '뉴예삐오');
INSERT INTO song (title, lyrics) VALUES ('별빛달빛', '너는 내 별빛 내 마음의
별빛');
INSERT INTO song (title, lyrics) VALUES ('A', 'A 워오우 워오우워 우우우');
INSERT INTO song (title, lyrics) VALUES ('나혼자', '나 혼자 밥을 먹고 나 혼자
영화 보고');
INSERT INTO song (title, lyrics) VALUES ('LUV', '설레이나요 ');
INSERT INTO song (title, lyrics) VALUES ('짧은치마', '짧은 치마를 입고 내가
길을 걸으면');
INSERT INTO song (title, lyrics) VALUES ('위아래', '위 아래 위위 아래');
INSERT INTO song (title, lyrics) VALUES ('Dumb Dumb' , '너 땜에 하루종일');
INSERT INTO girl_group (name, debut, hit_song_id)
VALUES ('원더걸스', '2007-09-12', 101);
INSERT INTO girl_group (name, debut, hit_song_id)
VALUES ('소녀시대', '2009-06-03', 102);
INSERT INTO girl_group (name, debut, hit_song_id)
VALUES ('카라', '2009-07-30', 103);
INSERT INTO girl_group (name, debut, hit_song_id)
VALUES ('브라운아이드걸스', '2008-01-17', 104);
INSERT INTO girl_group (name, debut, hit_song_id)
VALUES ('다비치', '2009-02-27', 105);
INSERT INTO girl_group (name, debut, hit_song_id)
VALUES ('2NE1', '2009-07-08', 107);
INSERT INTO girl_group (name, debut, hit_song_id)
VALUES ('f(x)', '2011-04-20', 109);
INSERT INTO girl_group (name, debut, hit_song_id)
VALUES ('시크릿', '2011-01-06', 110);
INSERT INTO girl_group (name, debut, hit_song_id)
VALUES ('레인보우', '2010-08-12', 111);
INSERT INTO girl_group (name, debut)
VALUES ('에프터 스쿨', '2009-11-25');
INSERT INTO girl_group (name, debut)
VALUES ('포미닛', '2009-08-28');

SELECT * FROM SONG;

SELECT * FROM girl_group;

SELECT gg._id, gg.name, s.title
FROM girl_group AS gg
JOIN song AS s
ON s._id = gg.hit_song_id;

*ON 대신 WHERE를 쓸 수 있다.
INNER 조인은 mysql에서는 간략히 JOIN으로 나타낸다.
일반적으로 사용하는 JOIN 이다.
핵심은 JOIN뒤에 ON인데, 두 테이블이 결합하는 조건을 나타낸다.
두 테이블 모두 노래의 _id를 가지고 있으며, 서로 모두 포함하는 레코드를 합쳐서 표현한다.
'위 아래' 라는 곡의 id는 115인데 이 값은 girl_group 테이블에 존재하지 않기 때문에 나오지 않는다.
집합으로 표현하자면 아래와 같다.

2. LEFT OUTER, RIGHT OUTER 조인

히트 곡이 저장되어 있지 않은 에프터 스쿨, 포미닛의 경우, 곡이 표시 되지 않더라도 보이고 싶을 때는 하나의 테이블 기준으로 합치는 조인을 사용할 수 있다.

SELECT gg._id, gg.name, s.title
FROM girl_group AS gg
LEFT OUTER JOIN song AS S
ON s._id = gg.hit_song_id;

SELECT s._id, s.title, gg.name
FROM girl_group AS gg
RIGHT OUTER JOIN song AS s
ON s._id = gg.hit_song_id;

SELECT s._id, s.title, gg.name
FROM girl_group AS gg
CROSS JOIN song AS s;

SELECT s._id, s.title, gg.name
FROM girl_group AS gg, song AS s;

두 쿼리의 결과는 같다.
카티전 조인은 너무 많은 레코드를 생성할 위험이 있기 때문에, 많이 사용하지는 않는다.

*NATURAL JOIN은 두 테이블에 칼럼명이 같은 것을 기준으로 INNER JOIN을 한다.
그렇기 때문에 JOIN 뒤에 ON을 생략할 수 있다.

4. 셀프 조인
일반적으로 JOIN은 연관된 두 개의 테이블을 연결하기 위해서 사용되지만, 자신의 테이블을 참조하는 셀프조인도 가능하다.

예제로 사용될 테이블은 사원의 정보를 담고 있는 테이블로 아래와 같다.
SELECT * FROM employee;


SELECT * FROM professor;
UNION
SELECT name FROM girl_group;


2.  서브 쿼리
서브 쿼리는 JOIN으로 할 수 있는 기능과 유사한 기능을 제공한다.
이번 시간에는 서브 쿼리가 어떤 경우에 유용하게 사용할 수 있을지에 대해 알아보자.
우선 저번 시간에 사용했던 girl_group 테이블과 song 테이블을 사용한다.

SELECT*
FROM girl_group
WHERE hit_song_id = (SELECT _id
FROM song
WHERE lyrics LIKE '%Give%'
);
3~6: (SELECT 부터 뒷 부분이 서브 쿼리다. 결과는 hit_song_id과 동일한 값인지 비교하게 된다.
 이 때 서브 쿼리의 결과는 한 개 보다 크다면 오류가 발생한다.
여러 값을 비교하고 싶다면 두 번째 쿼리를 사용하면 된다.


SELECT * 
FROM girl_group
WHERE hit_song_id IN (SELECT _id
FROM song
WHERE lyrics LIKE '%e%'
);

SELECT gg.name, gg.debut, s.title
FROM girl_group AS gg
JOIN song AS s
ON gg.hit_song_id = s._id
WHERE s.lyrics LIKE '%e%';

데이터를 유사하게 가져오지만, title 열은 song 테이블에 있는 열이다.

서브 쿼리의 위치는 다양하다. 위와 같이 사용하면 쿼리 결과에 song의 열은 포함할 수 없다. 위 join과 같은 결과를 얻기 위해선 아래와 같이 서브쿼리를 사용하면 된다.

SELECT gg.name, gg.debut,
(SELECT title
FROM song
WHERE title IS NOT NULL
AND lyrics LIKE '%e%'
AND gg.hit_song_id = _id
) AS hitsong
FROM girl_group AS gg;

지금 부터 서브 쿼리의 유용성에 대해 말해보겠다. 사실, JOIN이 서브 쿼리에 비해 속도 면에서는 더 좋은 것은 분명하다. 그러나 JOIN은 그 결과를 SELECT 하는 것만 가능하다는 단점이 있다. 그렇다, 서브 쿼리는 SELECT, INSERT, UPDATE, DELETE 모두 가능하다.

DELETE FROM girl_group
WHERE hit_song_id IN (SELECT _id
FROM song
WHERE lyrics LIKE '%e%'
);

select * from girl_group;

6장 사용자 권한 주기 (GRANT)

1. 권한 기본 설정 (GRANT)
사용자 암호 변경
ALTER USER 'mini'@'%' identified with mysql_native_password by '1111';

CREATE USER test_user IDENTIFIED BY 'test';

GRANT SELECT ON study_db.color TO test_user;

2. 특정 데이터베이스에 대한 권한 주기
GRANT SELECT, INSERT ON study_db.* TO a_user;
GRANT ALL ON study_db.* TO a_user;
GRANT SELECT ON *.* TO a_user;

1 : a_user 사용자는 study_db 데이터베이스의 모든 table에 대해서 SELECT, INSERT 권한을 가진다.
2 : 데이터베이스의 모든 테이블에 대해 모든 권한을 준다.
3 : a_user는 모든 데이터베이스의 모든 테이블에 대해 SELECT 권한을 가진다.

3. 여러가지 권한

# 역할 만들어 권한 부여하기
CREATE ROLE insert_manager;
GRANT INSERT, SELECT ON some_db.* TO insert_manager;
GRANT insert_manager TO b_user;

GRANT ALL ON study_db.* TO test_user WITH GRANT OPTION;

7장 부록 트랜잭션, 뷰 ,Date

1. 뷰 (VIEW)

뷰에 대한 설명은 다음과 같다.

쿼리를 저장하여 결과를 여러번 반복해서 확인하는 방법. 흔히, 가상 테이블이라한다.
실제로 동작하는 것은 내부적으로 서브 쿼리를 호출한다.

※ 뷰의 유용성
1. 테이블 구조가 변경되어도 뷰를 계속 사용가능
2. 어플리케이션 코드에 복잡한 쿼리가 존재하지 않게 할 수 있다.
3. 쿼리가 어플리케이션에 노출 되지 않음
4. SELECT 할 수 있는 데이터는 모두 뷰로 만들 수 있다.

2. CHECK
CREATE VIEW girl_group_song
AS
SELECT gg._id, gg.name, s.title
FROM girl_group AS gg
JOIN song AS s
ON s._id =gg.hit_song_id;

SELECT * FROM girl_group_song;

4. DATE (DATETIME, TIME)
TIMESTAMP는 시스템 변수를 통해 시간을 받아 오고, DATETIME은 임의로 입력한다.
DATETIME은 미래의 일정에 적합하고, TIMESTAMP는 어떤 처리 시간을 저장할 때 유용하다.

CREATE TABLE date_table
(
_id INT PRIMARY KEY AUTO_INCREMENT,
d_date DATE
);
INSERT INTO date_table VALUES( 0,'2016-11-22');

SELECT DATE_FORMAT(d_date, '%M %Y') FROM date_table;